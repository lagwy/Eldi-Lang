
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'ADDA0488A9B18CB143AD551C16D5586A'
    
_lr_action_items = {'NOTEQUAL':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,110,-67,-60,110,-61,-48,-53,-50,-49,-51,-47,-55,-52,-56,-54,110,110,]),'STRING_CTE':([62,80,93,94,96,97,98,102,103,104,106,107,108,109,110,111,112,113,114,116,141,149,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'RETURN':([3,4,30,47,50,51,52,54,55,56,58,59,60,61,66,67,69,70,71,75,76,95,115,144,147,151,152,154,155,156,157,158,161,162,163,164,],[-3,-2,-4,-73,-73,-73,-5,-73,-73,-73,62,-19,62,62,-21,-18,-20,-23,-22,-26,-24,-25,-27,-36,-30,-73,-73,-29,62,62,-37,-41,-38,-73,62,-42,]),'LESS':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,104,-67,-60,104,-61,-48,104,-50,-49,104,-47,104,104,104,104,104,104,]),'READ':([97,],[122,]),'VOID':([9,],[17,]),'ELSE':([158,],[160,]),'CHAR':([6,9,26,27,28,32,33,34,35,41,42,48,49,],[13,13,-73,-73,-73,13,-16,13,13,-14,13,-17,-15,]),'LESSEQUAL':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,111,-67,-60,111,-61,-48,-53,-50,-49,111,-47,-55,111,-56,-54,111,111,]),'WHILE':([3,4,30,47,50,51,52,54,55,56,58,59,60,61,66,67,69,70,71,75,76,95,115,144,147,151,152,154,155,156,157,158,161,162,163,164,],[-3,-2,-4,-73,-73,-73,-5,-73,-73,-73,63,-19,63,63,-21,-18,-20,-23,-22,-26,-24,-25,-27,-36,-30,-73,-73,-29,63,63,-37,-41,-38,-73,63,-42,]),'PRINT':([3,4,30,47,50,51,52,54,55,56,58,59,60,61,66,67,69,70,71,75,76,95,115,144,147,151,152,154,155,156,157,158,161,162,163,164,],[-3,-2,-4,-73,-73,-73,-5,-73,-73,-73,64,-19,64,64,-21,-18,-20,-23,-22,-26,-24,-25,-27,-36,-30,-73,-73,-29,64,64,-37,-41,-38,-73,64,-42,]),'TRUE':([62,80,93,94,96,97,98,102,103,104,106,107,108,109,110,111,112,113,114,116,141,149,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'LEFTSB':([18,31,73,],[22,37,96,]),'LEFTP':([19,20,21,62,63,64,65,73,74,80,86,92,93,94,96,97,98,102,103,104,106,107,108,109,110,111,112,113,114,116,122,141,149,],[26,27,28,80,-39,93,94,-32,98,80,-32,116,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,143,80,80,]),'SEMICOLON':([18,23,25,31,36,38,45,53,57,68,79,81,82,83,84,85,86,87,88,89,90,91,99,101,105,123,125,126,127,128,129,130,131,132,133,134,135,136,137,139,140,150,153,],[-73,30,-8,-73,-73,-6,52,-73,-7,95,-71,-45,-69,-70,-59,-72,-60,-68,-46,-67,115,-28,-60,-43,-44,144,-61,-48,-53,-50,-49,-51,-47,-55,-52,-56,-54,-58,-57,147,-31,154,157,]),'CHAR_CTE':([62,80,93,94,96,97,98,102,103,104,106,107,108,109,110,111,112,113,114,116,141,149,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'COMMA':([18,26,27,28,31,32,33,34,35,36,41,48,49,53,79,81,82,83,84,85,86,87,88,89,94,99,101,105,118,119,120,125,126,127,128,129,130,131,132,133,134,135,136,137,140,148,],[24,-73,-73,-73,24,42,-16,42,42,24,-14,-17,-15,24,-71,-45,-69,-70,-59,-72,-60,-68,-46,-67,-73,-60,-43,-44,-35,141,-33,-61,-48,-53,-50,-49,-51,-47,-55,-52,-56,-54,-58,-57,-31,-34,]),'LEFTB':([39,43,44,145,146,160,],[47,50,51,151,152,162,]),'IF':([3,4,30,47,50,51,52,54,55,56,58,59,60,61,66,67,69,70,71,75,76,95,115,144,147,151,152,154,155,156,157,158,161,162,163,164,],[-3,-2,-4,-73,-73,-73,-5,-73,-73,-73,74,-19,74,74,-21,-18,-20,-23,-22,-26,-24,-25,-27,-36,-30,-73,-73,-29,74,74,-37,-41,-38,-73,74,-42,]),'METHOD':([0,1,3,4,5,7,8,30,52,72,77,78,],[-73,-73,-3,-2,9,-10,-9,-4,-5,-13,-12,-11,]),'$end':([0,1,2,3,4,5,7,8,30,52,72,77,78,],[-73,-73,0,-3,-2,-1,-10,-9,-4,-5,-13,-12,-11,]),'DIVISION':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,102,-67,-60,102,-61,-48,102,102,102,102,-47,102,102,102,102,102,102,]),'STRING':([6,9,26,27,28,32,33,34,35,41,42,48,49,],[15,15,-73,-73,-73,15,-16,15,15,-14,15,-17,-15,]),'GREATEREQUAL':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,103,-67,-60,103,-61,-48,-53,-50,-49,103,-47,-55,103,-56,-54,103,103,]),'EQUALS':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,107,-67,-60,107,-61,-48,-53,-50,-49,-51,-47,-55,-52,-56,-54,107,107,]),'GREATERTHAN':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,112,-67,-60,112,-61,-48,-53,-50,-49,112,-47,-55,112,-56,-54,112,112,]),'VAR':([0,1,3,4,30,47,50,51,52,54,55,56,],[-73,6,-3,-2,-4,-73,-73,-73,-5,6,6,6,]),'FALSE':([62,80,93,94,96,97,98,102,103,104,106,107,108,109,110,111,112,113,114,116,141,149,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'TIMES':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,108,-67,-60,108,-61,-48,108,108,108,108,-47,108,108,108,108,108,108,]),'ID':([3,4,10,11,12,13,14,15,16,17,24,30,40,47,50,51,52,54,55,56,58,59,60,61,62,66,67,69,70,71,75,76,80,93,94,95,96,97,98,102,103,104,106,107,108,109,110,111,112,113,114,115,116,141,144,147,149,151,152,154,155,156,157,158,161,162,163,164,],[-3,-2,-65,18,-62,-63,-64,-66,19,20,31,-4,48,-73,-73,-73,-5,-73,-73,-73,73,-19,73,73,86,-21,-18,-20,-23,-22,-26,-24,99,86,86,-25,86,86,86,99,99,99,99,99,99,99,99,99,99,99,99,-27,86,86,-36,-30,86,-73,-73,-29,73,73,-37,-41,-38,-73,73,-42,]),'INT_CTE':([22,37,62,80,93,94,96,97,98,102,103,104,106,107,108,109,110,111,112,113,114,116,141,149,],[29,46,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'AND':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,114,-67,-60,114,-61,-48,-53,-50,-49,-51,-47,-55,-52,-56,-54,-58,-57,]),'RIGHTP':([26,27,28,32,33,34,35,41,48,49,79,81,82,83,84,85,86,87,88,89,94,99,100,101,105,117,118,119,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,140,143,148,],[-73,-73,-73,39,-16,43,44,-14,-17,-15,-71,-45,-69,-70,-59,-72,-60,-68,-46,-67,-73,-60,125,-43,-44,139,-35,140,-33,145,-61,-48,-53,-50,-49,-51,-47,-55,-52,-56,-54,-58,-57,146,-31,150,-34,]),'RIGHTSB':([29,46,79,81,82,83,84,85,86,87,88,89,99,101,105,121,125,126,127,128,129,130,131,132,133,134,135,136,137,140,],[36,53,-71,-45,-69,-70,-59,-72,-60,-68,-46,-67,-60,-43,-44,142,-61,-48,-53,-50,-49,-51,-47,-55,-52,-56,-54,-58,-57,-31,]),'INT':([6,9,26,27,28,32,33,34,35,41,42,48,49,],[12,12,-73,-73,-73,12,-16,12,12,-14,12,-17,-15,]),'SUM':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,106,-67,-60,106,-61,-48,106,-50,-49,106,-47,106,106,106,106,106,106,]),'FLOAT':([6,9,26,27,28,32,33,34,35,41,42,48,49,],[10,10,-73,-73,-73,10,-16,10,10,-14,10,-17,-15,]),'FLOAT_CTE':([62,80,93,94,96,97,98,102,103,104,106,107,108,109,110,111,112,113,114,116,141,149,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'LESSTHAN':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,109,-67,-60,109,-61,-48,-53,-50,-49,109,-47,-55,109,-56,-54,109,109,]),'ASSIGN':([73,142,],[97,149,]),'BOOLEAN':([6,9,26,27,28,32,33,34,35,41,42,48,49,],[14,14,-73,-73,-73,14,-16,14,14,-14,14,-17,-15,]),'RIGHTB':([3,4,30,47,50,51,52,54,55,56,58,59,60,61,66,67,69,70,71,75,76,95,115,144,147,151,152,154,155,156,157,158,159,161,162,163,164,],[-3,-2,-4,-73,-73,-73,-5,-73,-73,-73,72,-19,77,78,-21,-18,-20,-23,-22,-26,-24,-25,-27,-36,-30,-73,-73,-29,158,-40,-37,-41,161,-38,-73,164,-42,]),'MAIN':([17,],[21,]),'OR':([79,82,83,84,85,86,87,88,89,99,100,125,126,127,128,129,130,131,132,133,134,135,136,137,],[-71,-69,-70,-59,-72,-60,-68,113,-67,-60,113,-61,-48,-53,-50,-49,-51,-47,-55,-52,-56,-54,-58,-57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'constante':([62,80,93,94,96,97,98,102,103,104,106,107,108,109,110,111,112,113,114,116,141,149,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'variables':([1,54,55,56,],[4,4,4,4,]),'bloque':([54,55,56,151,152,162,],[58,60,61,155,156,163,]),'llamada1':([58,60,61,62,93,94,96,97,98,116,141,149,155,156,163,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'ciclo':([58,60,61,155,156,163,],[66,66,66,66,66,66,]),'tipo':([6,9,32,34,35,42,],[11,16,40,40,40,40,]),'exp2':([88,],[105,]),'exp1':([81,],[101,]),'estatuto':([58,60,61,155,156,163,],[67,67,67,67,67,67,]),'llamada':([58,60,61,62,93,94,96,97,98,116,141,149,155,156,163,],[68,68,68,81,81,81,81,81,81,81,81,81,68,68,68,]),'condicion':([58,60,61,155,156,163,],[69,69,69,69,69,69,]),'variables_list':([0,47,50,51,],[1,54,55,56,]),'params':([26,27,28,],[32,34,35,]),'lectura':([58,60,61,155,156,163,],[70,70,70,70,70,70,]),'empty':([0,1,18,26,27,28,31,36,47,50,51,53,54,55,56,94,151,152,162,],[3,7,25,33,33,33,25,25,3,3,3,25,59,59,59,118,59,59,59,]),'return':([58,60,61,155,156,163,],[71,71,71,71,71,71,]),'parametro':([32,34,35,42,],[41,41,41,49,]),'args':([94,],[119,]),'metodos':([1,],[5,]),'ciclo2':([156,],[159,]),'ciclo1':([63,],[92,]),'expresion':([62,80,93,94,96,97,98,102,103,104,106,107,108,109,110,111,112,113,114,116,141,149,],[88,100,88,88,88,88,88,126,127,128,129,130,131,132,133,134,135,136,137,88,88,88,]),'metodo':([5,],[8,]),'asignacion':([58,60,61,155,156,163,],[75,75,75,75,75,75,]),'return1':([62,],[90,]),'programa':([0,],[2,]),'exp':([62,93,94,96,97,98,116,141,149,],[91,117,120,121,123,124,138,148,153,]),'lista_variables':([18,31,36,53,],[23,38,45,57,]),'escritura':([58,60,61,155,156,163,],[76,76,76,76,76,76,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> variables_list metodos','programa',2,'p_programa','Parser.py',361),
  ('variables_list -> variables_list variables','variables_list',2,'p_variables_list','Parser.py',382),
  ('variables_list -> empty','variables_list',1,'p_variables_list','Parser.py',383),
  ('variables -> VAR tipo ID lista_variables SEMICOLON','variables',5,'p_variables','Parser.py',394),
  ('variables -> VAR tipo ID LEFTSB INT_CTE RIGHTSB lista_variables SEMICOLON','variables',8,'p_variables','Parser.py',395),
  ('lista_variables -> COMMA ID lista_variables','lista_variables',3,'p_lista_variables','Parser.py',412),
  ('lista_variables -> COMMA ID LEFTSB INT_CTE RIGHTSB lista_variables','lista_variables',6,'p_lista_variables','Parser.py',413),
  ('lista_variables -> empty','lista_variables',1,'p_lista_variables','Parser.py',414),
  ('metodos -> metodos metodo','metodos',2,'p_metodos','Parser.py',426),
  ('metodos -> empty','metodos',1,'p_metodos','Parser.py',427),
  ('metodo -> METHOD VOID MAIN LEFTP params RIGHTP LEFTB variables_list bloque RIGHTB','metodo',10,'p_metodo','Parser.py',437),
  ('metodo -> METHOD VOID ID LEFTP params RIGHTP LEFTB variables_list bloque RIGHTB','metodo',10,'p_metodo','Parser.py',438),
  ('metodo -> METHOD tipo ID LEFTP params RIGHTP LEFTB variables_list bloque RIGHTB','metodo',10,'p_metodo','Parser.py',439),
  ('params -> params parametro','params',2,'p_params','Parser.py',490),
  ('params -> params COMMA parametro','params',3,'p_params','Parser.py',491),
  ('params -> empty','params',1,'p_params','Parser.py',492),
  ('parametro -> tipo ID','parametro',2,'p_parametro','Parser.py',507),
  ('bloque -> bloque estatuto','bloque',2,'p_bloque','Parser.py',514),
  ('bloque -> empty','bloque',1,'p_bloque','Parser.py',515),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','Parser.py',518),
  ('estatuto -> ciclo','estatuto',1,'p_estatuto','Parser.py',519),
  ('estatuto -> return','estatuto',1,'p_estatuto','Parser.py',520),
  ('estatuto -> lectura','estatuto',1,'p_estatuto','Parser.py',521),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','Parser.py',522),
  ('estatuto -> llamada SEMICOLON','estatuto',2,'p_estatuto','Parser.py',523),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','Parser.py',524),
  ('return -> RETURN return1 SEMICOLON','return',3,'p_return','Parser.py',529),
  ('return1 -> exp','return1',1,'p_return1','Parser.py',532),
  ('lectura -> ID ASSIGN READ LEFTP RIGHTP SEMICOLON','lectura',6,'p_lectura','Parser.py',550),
  ('escritura -> PRINT LEFTP exp RIGHTP SEMICOLON','escritura',5,'p_escritura','Parser.py',562),
  ('llamada -> llamada1 LEFTP args RIGHTP','llamada',4,'p_llamada','Parser.py',572),
  ('llamada1 -> ID','llamada1',1,'p_llamada1','Parser.py',619),
  ('args -> exp','args',1,'p_args','Parser.py',629),
  ('args -> args COMMA exp','args',3,'p_args','Parser.py',630),
  ('args -> empty','args',1,'p_args','Parser.py',631),
  ('asignacion -> ID ASSIGN exp SEMICOLON','asignacion',4,'p_asignacion','Parser.py',659),
  ('asignacion -> ID LEFTSB exp RIGHTSB ASSIGN exp SEMICOLON','asignacion',7,'p_asignacion','Parser.py',660),
  ('ciclo -> WHILE ciclo1 LEFTP exp RIGHTP LEFTB bloque ciclo2 RIGHTB','ciclo',9,'p_ciclo','Parser.py',686),
  ('ciclo1 -> <empty>','ciclo1',0,'p_ciclo1','Parser.py',693),
  ('ciclo2 -> <empty>','ciclo2',0,'p_ciclo2','Parser.py',705),
  ('condicion -> IF LEFTP exp RIGHTP LEFTB bloque RIGHTB','condicion',7,'p_condicion','Parser.py',715),
  ('condicion -> IF LEFTP exp RIGHTP LEFTB bloque RIGHTB ELSE LEFTB bloque RIGHTB','condicion',11,'p_condicion','Parser.py',716),
  ('exp -> llamada exp1','exp',2,'p_exp','Parser.py',726),
  ('exp -> expresion exp2','exp',2,'p_exp','Parser.py',727),
  ('exp1 -> <empty>','exp1',0,'p_exp1','Parser.py',732),
  ('exp2 -> <empty>','exp2',0,'p_exp2','Parser.py',738),
  ('expresion -> expresion TIMES expresion','expresion',3,'p_expresion','Parser.py',744),
  ('expresion -> expresion DIVISION expresion','expresion',3,'p_expresion','Parser.py',745),
  ('expresion -> expresion SUM expresion','expresion',3,'p_expresion','Parser.py',746),
  ('expresion -> expresion LESS expresion','expresion',3,'p_expresion','Parser.py',747),
  ('expresion -> expresion EQUALS expresion','expresion',3,'p_expresion','Parser.py',748),
  ('expresion -> expresion NOTEQUAL expresion','expresion',3,'p_expresion','Parser.py',749),
  ('expresion -> expresion GREATEREQUAL expresion','expresion',3,'p_expresion','Parser.py',750),
  ('expresion -> expresion GREATERTHAN expresion','expresion',3,'p_expresion','Parser.py',751),
  ('expresion -> expresion LESSTHAN expresion','expresion',3,'p_expresion','Parser.py',752),
  ('expresion -> expresion LESSEQUAL expresion','expresion',3,'p_expresion','Parser.py',753),
  ('expresion -> expresion AND expresion','expresion',3,'p_expresion','Parser.py',754),
  ('expresion -> expresion OR expresion','expresion',3,'p_expresion','Parser.py',755),
  ('expresion -> constante','expresion',1,'p_expresion2','Parser.py',835),
  ('expresion -> ID','expresion',1,'p_expresion2','Parser.py',836),
  ('expresion -> LEFTP expresion RIGHTP','expresion',3,'p_expresion2','Parser.py',837),
  ('tipo -> INT','tipo',1,'p_tipo','Parser.py',847),
  ('tipo -> CHAR','tipo',1,'p_tipo','Parser.py',848),
  ('tipo -> BOOLEAN','tipo',1,'p_tipo','Parser.py',849),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Parser.py',850),
  ('tipo -> STRING','tipo',1,'p_tipo','Parser.py',851),
  ('constante -> FLOAT_CTE','constante',1,'p_constante','Parser.py',867),
  ('constante -> INT_CTE','constante',1,'p_constante','Parser.py',868),
  ('constante -> CHAR_CTE','constante',1,'p_constante','Parser.py',869),
  ('constante -> STRING_CTE','constante',1,'p_constante','Parser.py',870),
  ('constante -> TRUE','constante',1,'p_constante','Parser.py',871),
  ('constante -> FALSE','constante',1,'p_constante','Parser.py',872),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',877),
]
